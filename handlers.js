// Handlers complementares para o bot Caffon√≠a Enhanced

const { EmbedBuilder } = require('discord.js');

// Handler para comando de pausa
async function handlePauseCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || !queue.currentSong) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    queue.player.pause();
    await interaction.reply('‚è∏Ô∏è M√∫sica pausada!');
}

// Handler para comando de resume
async function handleResumeCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || !queue.currentSong) {
        await interaction.reply('‚ùå Nenhuma m√∫sica pausada!');
        return;
    }
    
    queue.player.unpause();
    await interaction.reply('‚ñ∂Ô∏è M√∫sica retomada!');
}

// Handler para comando de skip
async function handleSkipCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || !queue.currentSong) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    const skippedSong = queue.currentSong.title;
    queue.player.stop();
    await interaction.reply(`‚è≠Ô∏è M√∫sica pulada: **${skippedSong}**`);
}

// Handler para comando de stop
async function handleStopCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    queue.songs = [];
    queue.player.stop();
    if (queue.connection) {
        queue.connection.destroy();
    }
    musicQueues.delete(guildId);
    
    await interaction.reply('‚èπÔ∏è M√∫sica parada e fila limpa!');
}

// Handler para comando de volume
async function handleVolumeCommand(interaction) {
    const volume = interaction.options.getInteger('nivel');
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || !queue.currentSong) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    queue.volume = volume;
    if (queue.player.state.resource?.volume) {
        queue.player.state.resource.volume.setVolume(volume / 100);
    }
    
    await interaction.reply(`üîä Volume ajustado para ${volume}%!`);
}

// Handler para comando de fila
async function handleQueueCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || (!queue.currentSong && queue.songs.length === 0)) {
        await interaction.reply('üìù Fila vazia!');
        return;
    }
    
    const embed = new EmbedBuilder()
        .setColor('#FFE66D')
        .setTitle('üìù Fila de M√∫sicas')
        .setFooter({ text: `Total: ${queue.songs.length + (queue.currentSong ? 1 : 0)} m√∫sica(s)` });
    
    let description = '';
    
    if (queue.currentSong) {
        description += `**üéµ Tocando Agora:**\n${queue.currentSong.title} - ${queue.currentSong.artist}\n\n`;
    }
    
    if (queue.songs.length > 0) {
        description += '**üìã Pr√≥ximas:**\n';
        queue.songs.slice(0, 10).forEach((song, index) => {
            description += `${index + 1}. ${song.title} - ${song.artist}\n`;
        });
        
        if (queue.songs.length > 10) {
            description += `\n... e mais ${queue.songs.length - 10} m√∫sica(s)`;
        }
    }
    
    embed.setDescription(description || 'Fila vazia');
    
    await interaction.reply({ embeds: [embed] });
}

// Handler para sistema de playlists
async function handlePlaylistCommand(interaction) {
    const subcommand = interaction.options.getSubcommand();
    const userId = interaction.user.id;
    
    if (!userPlaylists.has(userId)) {
        userPlaylists.set(userId, {});
    }
    
    const userPlaylistsData = userPlaylists.get(userId);
    
    switch (subcommand) {
        case 'create':
            const playlistName = interaction.options.getString('nome');
            
            if (userPlaylistsData[playlistName]) {
                await interaction.reply('‚ùå Playlist j√° existe!');
                return;
            }
            
            userPlaylistsData[playlistName] = {
                name: playlistName,
                songs: [],
                createdAt: new Date(),
                totalDuration: 0
            };
            
            userPlaylists.set(userId, userPlaylistsData);
            await interaction.reply(`‚úÖ Playlist **${playlistName}** criada!`);
            break;
            
        case 'add':
            const playlistToAdd = interaction.options.getString('playlist');
            const musicToAdd = interaction.options.getString('musica');
            
            if (!userPlaylistsData[playlistToAdd]) {
                await interaction.reply('‚ùå Playlist n√£o encontrada!');
                return;
            }
            
            await interaction.deferReply();
            
            try {
                const song = await searchYoutube(musicToAdd);
                userPlaylistsData[playlistToAdd].songs.push(song);
                
                if (userPlaylistsData[playlistToAdd].songs.length > config.music.maxPlaylistSize) {
                    await interaction.editReply(`‚ùå Playlist cheia! M√°ximo de ${config.music.maxPlaylistSize} m√∫sicas.`);
                    return;
                }
                
                userPlaylists.set(userId, userPlaylistsData);
                await interaction.editReply(`‚úÖ **${song.title}** adicionada √† playlist **${playlistToAdd}**!`);
            } catch (error) {
                await interaction.editReply(`‚ùå Erro ao adicionar m√∫sica: ${error.message}`);
            }
            break;
            
        case 'play':
            const playlistToPlay = interaction.options.getString('nome');
            
            if (!userPlaylistsData[playlistToPlay]) {
                await interaction.reply('‚ùå Playlist n√£o encontrada!');
                return;
            }
            
            const playlist = userPlaylistsData[playlistToPlay];
            if (playlist.songs.length === 0) {
                await interaction.reply('‚ùå Playlist vazia!');
                return;
            }
            
            const member = interaction.member;
            if (!member.voice.channel) {
                await interaction.reply('‚ùå Voc√™ precisa estar em um canal de voz!');
                return;
            }
            
            await interaction.deferReply();
            
            const guildId = interaction.guildId;
            let queue = musicQueues.get(guildId);
            if (!queue) {
                queue = new EnhancedMusicQueue(guildId, member.voice.channel, interaction.channel);
                musicQueues.set(guildId, queue);
            }
            
            for (const song of playlist.songs) {
                song.requestedBy = userId;
                await queue.addSong({ ...song });
            }
            
            await interaction.editReply(`üéµ Tocando playlist **${playlistToPlay}** com ${playlist.songs.length} m√∫sica(s)!`);
            break;
            
        case 'list':
            const playlists = Object.keys(userPlaylistsData);
            
            if (playlists.length === 0) {
                await interaction.reply('üìù Voc√™ n√£o tem playlists criadas!');
                return;
            }
            
            const embed = new EmbedBuilder()
                .setColor('#A8E6CF')
                .setTitle('üìã Suas Playlists')
                .setDescription(playlists.map(name => {
                    const playlist = userPlaylistsData[name];
                    return `**${name}** - ${playlist.songs.length} m√∫sica(s)`;
                }).join('\n'));
            
            await interaction.reply({ embeds: [embed] });
            break;
            
        case 'delete':
            const playlistToDelete = interaction.options.getString('nome');
            
            if (!userPlaylistsData[playlistToDelete]) {
                await interaction.reply('‚ùå Playlist n√£o encontrada!');
                return;
            }
            
            delete userPlaylistsData[playlistToDelete];
            userPlaylists.set(userId, userPlaylistsData);
            await interaction.reply(`üóëÔ∏è Playlist **${playlistToDelete}** deletada!`);
            break;
    }
}

// Handler para sistema de favoritos
async function handleFavoriteCommand(interaction) {
    const subcommand = interaction.options.getSubcommand();
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    if (!userFavorites.has(userId)) {
        userFavorites.set(userId, []);
    }
    
    const favorites = userFavorites.get(userId);
    
    switch (subcommand) {
        case 'add':
            const queue = musicQueues.get(guildId);
            if (!queue || !queue.currentSong) {
                await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
                return;
            }
            
            const currentSong = queue.currentSong;
            
            // Verificar se j√° est√° nos favoritos
            if (favorites.find(song => song.url === currentSong.url)) {
                await interaction.reply('‚ùå Esta m√∫sica j√° est√° nos seus favoritos!');
                return;
            }
            
            favorites.push({ ...currentSong });
            userFavorites.set(userId, favorites);
            
            await interaction.reply(`‚ù§Ô∏è **${currentSong.title}** adicionada aos favoritos!`);
            break;
            
        case 'play':
            if (favorites.length === 0) {
                await interaction.reply('‚ùå Voc√™ n√£o tem m√∫sicas favoritas!');
                return;
            }
            
            const member = interaction.member;
            if (!member.voice.channel) {
                await interaction.reply('‚ùå Voc√™ precisa estar em um canal de voz!');
                return;
            }
            
            await interaction.deferReply();
            
            let queue = musicQueues.get(guildId);
            if (!queue) {
                queue = new EnhancedMusicQueue(guildId, member.voice.channel, interaction.channel);
                musicQueues.set(guildId, queue);
            }
            
            // Embaralhar favoritos
            const shuffledFavorites = [...favorites].sort(() => Math.random() - 0.5);
            
            for (const song of shuffledFavorites) {
                song.requestedBy = userId;
                await queue.addSong({ ...song });
            }
            
            await interaction.editReply(`‚ù§Ô∏è Tocando ${favorites.length} m√∫sica(s) favorita(s) aleatoriamente!`);
            break;
            
        case 'list':
            if (favorites.length === 0) {
                await interaction.reply('‚ù§Ô∏è Voc√™ n√£o tem m√∫sicas favoritas!');
                return;
            }
            
            const embed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ù§Ô∏è Suas M√∫sicas Favoritas')
                .setDescription(favorites.slice(0, 10).map((song, index) => {
                    return `${index + 1}. **${song.title}** - ${song.artist}`;
                }).join('\n'))
                .setFooter({ text: `Total: ${favorites.length} m√∫sica(s)` });
            
            await interaction.reply({ embeds: [embed] });
            break;
    }
}

// Handler para sistema de humor
async function handleMoodCommand(interaction) {
    const mood = interaction.options.getString('tipo');
    const guildId = interaction.guildId;
    const member = interaction.member;
    
    if (!member.voice.channel) {
        await interaction.reply('‚ùå Voc√™ precisa estar em um canal de voz!');
        return;
    }
    
    await interaction.deferReply();
    
    let queue = musicQueues.get(guildId);
    if (!queue) {
        queue = new EnhancedMusicQueue(guildId, member.voice.channel, interaction.channel);
        musicQueues.set(guildId, queue);
    }
    
    queue.mood = mood;
    
    // Buscar m√∫sicas do humor selecionado
    const moodQueries = getMoodPlaylist(mood);
    const randomQuery = moodQueries[Math.floor(Math.random() * moodQueries.length)];
    
    try {
        const results = await search(randomQuery, { limit: 5 });
        
        for (const result of results) {
            const song = {
                title: result.title,
                artist: result.channel?.name || 'Desconhecido',
                url: result.url,
                duration: result.durationFormatted,
                thumbnail: result.thumbnails?.[0]?.url,
                source: 'youtube',
                requestedBy: interaction.user.id
            };
            
            await queue.addSong(song);
        }
        
        const moodEmojis = {
            chill: 'üòå',
            focus: 'üéØ',
            gaming: 'üéÆ',
            party: 'üéâ',
            sleep: 'üí§',
            workout: 'üèÉ'
        };
        
        await interaction.editReply(`${moodEmojis[mood]} Modo **${mood}** ativado! Adicionadas 5 m√∫sicas √† fila.`);
    } catch (error) {
        await interaction.editReply(`‚ùå Erro ao buscar m√∫sicas para o humor: ${error.message}`);
    }
}

// Handler para timer de sleep
async function handleSleepCommand(interaction) {
    const minutes = interaction.options.getInteger('minutos');
    const guildId = interaction.guildId;
    
    // Cancelar timer anterior se existir
    if (timers.has(guildId)) {
        clearTimeout(timers.get(guildId));
    }
    
    const timer = setTimeout(() => {
        const queue = musicQueues.get(guildId);
        if (queue) {
            queue.songs = [];
            queue.player.stop();
            if (queue.connection) {
                queue.connection.destroy();
            }
            musicQueues.delete(guildId);
            
            interaction.channel.send('üí§ Timer de sleep ativado! M√∫sica parada.');
        }
        timers.delete(guildId);
    }, minutes * 60 * 1000);
    
    timers.set(guildId, timer);
    
    await interaction.reply(`‚è∞ Timer de sleep configurado para ${minutes} minuto(s)!`);
}

// Handler para Pomodoro
async function handlePomodoroCommand(interaction) {
    const cycles = interaction.options.getInteger('ciclos') || 4;
    const guildId = interaction.guildId;
    
    await interaction.reply(`üçÖ Iniciando sess√£o Pomodoro com ${cycles} ciclo(s)!\n25min m√∫sica ‚Üí 5min pausa`);
    
    let currentCycle = 0;
    
    const pomodoroInterval = setInterval(() => {
        const queue = musicQueues.get(guildId);
        
        if (currentCycle % 2 === 0) {
            // Per√≠odo de trabalho (m√∫sica)
            interaction.channel.send(`üçÖ Ciclo ${Math.floor(currentCycle / 2) + 1}: Per√≠odo de trabalho (25min) - M√∫sica ativada!`);
            
            if (queue) {
                queue.player.unpause();
            }
        } else {
            // Per√≠odo de pausa (sil√™ncio)
            interaction.channel.send(`‚òï Pausa de 5 minutos - M√∫sica pausada!`);
            
            if (queue) {
                queue.player.pause();
            }
        }
        
        currentCycle++;
        
        if (currentCycle >= cycles * 2) {
            clearInterval(pomodoroInterval);
            interaction.channel.send('üéâ Sess√£o Pomodoro conclu√≠da! Parab√©ns!');
        }
    }, currentCycle % 2 === 0 ? 25 * 60 * 1000 : 5 * 60 * 1000); // 25min ou 5min
}

// Handler para r√°dio 24/7
async function handleRadioCommand(interaction) {
    const subcommand = interaction.options.getSubcommand();
    const guildId = interaction.guildId;
    
    switch (subcommand) {
        case 'start':
            const radioType = interaction.options.getString('tipo');
            const member = interaction.member;
            
            if (!member.voice.channel) {
                await interaction.reply('‚ùå Voc√™ precisa estar em um canal de voz!');
                return;
            }
            
            await interaction.deferReply();
            
            // URLs de r√°dios 24/7 do YouTube
            const radioUrls = {
                lofi: 'https://www.youtube.com/watch?v=jfKfPfyJRdk', // Lofi Hip Hop Radio
                gaming: 'https://www.youtube.com/watch?v=4xDzrJKXOOY', // Gaming Music Radio
                work: 'https://www.youtube.com/watch?v=5qap5aO4i9A', // Work/Study Music
                chill: 'https://www.youtube.com/watch?v=DWcJFNfaw9c' // Chill Music Radio
            };
            
            let queue = musicQueues.get(guildId);
            if (!queue) {
                queue = new EnhancedMusicQueue(guildId, member.voice.channel, interaction.channel);
                musicQueues.set(guildId, queue);
            }
            
            const radioSong = {
                title: `R√°dio ${radioType.toUpperCase()} 24/7`,
                artist: 'R√°dio Online',
                url: radioUrls[radioType],
                duration: '‚àû',
                source: 'youtube',
                requestedBy: interaction.user.id,
                isRadio: true
            };
            
            queue.songs = [radioSong]; // Limpar fila e adicionar r√°dio
            queue.loop = 'song'; // Loop infinito
            
            await queue.playNext();
            
            radioStations.set(guildId, radioType);
            
            await interaction.editReply(`üìª R√°dio ${radioType.toUpperCase()} 24/7 iniciada!`);
            break;
            
        case 'stop':
            if (radioStations.has(guildId)) {
                const queue = musicQueues.get(guildId);
                if (queue) {
                    queue.loop = 'off';
                    queue.player.stop();
                }
                radioStations.delete(guildId);
                await interaction.reply('üìª R√°dio parada!');
            } else {
                await interaction.reply('‚ùå Nenhuma r√°dio ativa!');
            }
            break;
    }
}

// Handler para shuffle
async function handleShuffleCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply('‚ùå Nenhuma m√∫sica na fila!');
        return;
    }
    
    queue.shuffle = !queue.shuffle;
    
    if (queue.shuffle) {
        // Embaralhar a fila atual
        for (let i = queue.songs.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [queue.songs[i], queue.songs[j]] = [queue.songs[j], queue.songs[i]];
        }
    }
    
    await interaction.reply(`üîÄ Modo aleat√≥rio ${queue.shuffle ? 'ativado' : 'desativado'}!`);
}

// Handler para loop
async function handleLoopCommand(interaction) {
    const mode = interaction.options.getString('modo');
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    if (mode) {
        queue.loop = mode;
    } else {
        // Ciclar entre os modos
        const modes = ['off', 'song', 'queue'];
        const currentIndex = modes.indexOf(queue.loop);
        queue.loop = modes[(currentIndex + 1) % modes.length];
    }
    
    const loopEmojis = {
        off: '‚ùå Desativado',
        song: 'üîÇ M√∫sica',
        queue: 'üîÅ Fila'
    };
    
    await interaction.reply(`üîÅ Modo de repeti√ß√£o: ${loopEmojis[queue.loop]}`);
}

// Handler para autoplay
async function handleAutoplayCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    queue.autoplay = !queue.autoplay;
    await interaction.reply(`üéµ Reprodu√ß√£o autom√°tica ${queue.autoplay ? 'ativada' : 'desativada'}!`);
}

// Handler para qualidade
async function handleQualityCommand(interaction) {
    const quality = interaction.options.getString('nivel');
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    queue.quality = quality;
    
    const qualityEmojis = {
        high: 'üîä Alta',
        low: 'üîâ Baixa',
        auto: 'üîÑ Autom√°tica'
    };
    
    await interaction.reply(`üéß Qualidade de √°udio: ${qualityEmojis[quality]}`);
}

// Handler para estat√≠sticas
async function handleStatsCommand(interaction) {
    const userId = interaction.user.id;
    
    if (!userStats.has(userId)) {
        await interaction.reply('üìä Voc√™ ainda n√£o tem estat√≠sticas!');
        return;
    }
    
    const stats = userStats.get(userId);
    const favorites = userFavorites.get(userId) || [];
    const playlists = Object.keys(userPlaylists.get(userId) || {});
    
    const embed = new EmbedBuilder()
        .setColor('#95E1D3')
        .setTitle('üìä Suas Estat√≠sticas Musicais')
        .addFields(
            { name: 'üéµ Total Reproduzido', value: `${stats.totalPlayed} m√∫sica(s)`, inline: true },
            { name: '‚ù§Ô∏è Favoritos', value: `${favorites.length} m√∫sica(s)`, inline: true },
            { name: 'üìã Playlists', value: `${playlists.length} playlist(s)`, inline: true }
        )
        .setFooter({ text: `Estat√≠sticas de ${interaction.user.username}` });
    
    if (stats.history.length > 0) {
        const recentSongs = stats.history.slice(0, 5).map((song, index) => 
            `${index + 1}. ${song.title} - ${song.artist}`
        ).join('\n');
        
        embed.addFields({ name: 'üïí Reproduzidas Recentemente', value: recentSongs });
    }
    
    await interaction.reply({ embeds: [embed] });
}

// Handler para m√∫sica atual
async function handleNowPlayingCommand(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue || !queue.currentSong) {
        await interaction.reply('‚ùå Nenhuma m√∫sica tocando!');
        return;
    }
    
    await queue.sendNowPlayingEmbed();
    await interaction.reply('üéµ Informa√ß√µes da m√∫sica atual enviadas!');
}

// Handler para ajuda
async function handleHelpCommand(interaction) {
    const embed = new EmbedBuilder()
        .setColor('#FFD93D')
        .setTitle('üéµ Caffon√≠a Enhanced - Comandos Dispon√≠veis')
        .setDescription('Bot de m√∫sica completo com Spotify, YouTube e muito mais!')
        .addFields(
            {
                name: 'üéµ Reprodu√ß√£o B√°sica',
                value: '`/play` - Tocar do YouTube\n`/playspotify` - Tocar do Spotify\n`/pause` - Pausar\n`/resume` - Retomar\n`/skip` - Pular\n`/stop` - Parar\n`/queue` - Ver fila\n`/volume` - Ajustar volume',
                inline: true
            },
            {
                name: 'üìã Playlists',
                value: '`/playlist create` - Criar playlist\n`/playlist add` - Adicionar m√∫sica\n`/playlist play` - Tocar playlist\n`/playlist list` - Listar playlists\n`/playlist delete` - Deletar playlist',
                inline: true
            },
            {
                name: '‚ù§Ô∏è Favoritos',
                value: '`/fav add` - Adicionar atual\n`/fav play` - Tocar favoritos\n`/fav list` - Listar favoritos',
                inline: true
            },
            {
                name: 'üé≠ Humores',
                value: '`/mood chill` - M√∫sica relaxante\n`/mood focus` - Para concentra√ß√£o\n`/mood gaming` - Para jogos\n`/mood party` - Festa\n`/mood sleep` - Para dormir\n`/mood workout` - Exerc√≠cios',
                inline: true
            },
            {
                name: '‚è∞ Timer & Pomodoro',
                value: '`/sleep` - Timer para parar\n`/pomodoro` - Sess√£o Pomodoro\n(25min m√∫sica + 5min pausa)',
                inline: true
            },
            {
                name: 'üìª R√°dio 24/7',
                value: '`/radio start lofi` - R√°dio Lo-Fi\n`/radio start gaming` - R√°dio Gaming\n`/radio start work` - R√°dio Trabalho\n`/radio stop` - Parar r√°dio',
                inline: true
            },
            {
                name: '‚öôÔ∏è Configura√ß√µes',
                value: '`/shuffle` - Modo aleat√≥rio\n`/loop` - Repeti√ß√£o\n`/autoplay` - Reprodu√ß√£o autom√°tica\n`/quality` - Qualidade do √°udio',
                inline: true
            },
            {
                name: 'üìä Informa√ß√µes',
                value: '`/stats` - Suas estat√≠sticas\n`/nowplaying` - M√∫sica atual\n`/help` - Esta ajuda',
                inline: true
            }
        )
        .addFields({
            name: '‚ú® Funcionalidades Especiais',
            value: '‚Ä¢ Controles por bot√µes interativos\n‚Ä¢ Integra√ß√£o Spotify + YouTube\n‚Ä¢ Sistema inteligente de recomenda√ß√µes\n‚Ä¢ Playlists personalizadas ilimitadas\n‚Ä¢ Estat√≠sticas detalhadas de uso\n‚Ä¢ Modos de humor para cada ocasi√£o\n‚Ä¢ Timer e Pomodoro para produtividade\n‚Ä¢ R√°dio 24/7 sempre tocando\n‚Ä¢ Qualidade de √°udio ajust√°vel',
            inline: false
        })
        .setFooter({ text: 'Desenvolvido com ‚ù§Ô∏è por Daniel Tomaz | Caffon√≠a Enhanced v2.0' });
    
    await interaction.reply({ embeds: [embed] });
}

// Handler para intera√ß√µes de bot√µes
async function handleButtonInteraction(interaction) {
    const guildId = interaction.guildId;
    const queue = musicQueues.get(guildId);
    
    if (!queue) {
        await interaction.reply({ content: '‚ùå Nenhuma m√∫sica tocando!', ephemeral: true });
        return;
    }
    
    switch (interaction.customId) {
        case 'pause_resume':
            if (queue.player.state.status === 'playing') {
                queue.player.pause();
                await interaction.reply({ content: '‚è∏Ô∏è Pausado!', ephemeral: true });
            } else {
                queue.player.unpause();
                await interaction.reply({ content: '‚ñ∂Ô∏è Retomado!', ephemeral: true });
            }
            break;
            
        case 'skip':
            const skipped = queue.currentSong?.title || 'm√∫sica';
            queue.player.stop();
            await interaction.reply({ content: `‚è≠Ô∏è **${skipped}** pulada!`, ephemeral: true });
            break;
            
        case 'shuffle':
            queue.shuffle = !queue.shuffle;
            await interaction.reply({ content: `üîÄ Shuffle ${queue.shuffle ? 'ativado' : 'desativado'}!`, ephemeral: true });
            break;
            
        case 'loop':
            const modes = ['off', 'song', 'queue'];
            const currentIndex = modes.indexOf(queue.loop);
            queue.loop = modes[(currentIndex + 1) % modes.length];
            
            const loopNames = { off: 'Desativado', song: 'M√∫sica', queue: 'Fila' };
            await interaction.reply({ content: `üîÅ Loop: ${loopNames[queue.loop]}`, ephemeral: true });
            break;
            
        case 'queue':
            await handleQueueCommand(interaction);
            break;
    }
}

module.exports = {
    handlePauseCommand,
    handleResumeCommand,
    handleSkipCommand,
    handleStopCommand,
    handleVolumeCommand,
    handleQueueCommand,
    handlePlaylistCommand,
    handleFavoriteCommand,
    handleMoodCommand,
    handleSleepCommand,
    handlePomodoroCommand,
    handleRadioCommand,
    handleShuffleCommand,
    handleLoopCommand,
    handleAutoplayCommand,
    handleQualityCommand,
    handleStatsCommand,
    handleNowPlayingCommand,
    handleHelpCommand,
    handleButtonInteraction
};
